import streamlit as st
import pickle
from sklearn.preprocessing import StandardScaler
import numpy as np

sc = StandardScaler()
X_train = np.load("C:/Users/hp/Desktop/hip/again/X_train.npy")
sc.fit_transform(X_train)

loaded_model = pickle.load(open('C:/Users/hp/Desktop/hip/again/trained_model.sav','rb'))

def prediction(New_example):
    new_pred=loaded_model.predict(sc.transform(New_example))
    new_pred_1 = new_pred.argmax(axis = 1)
    return (new_pred_1) 

def main():
    # Set page title and icon
    st.set_page_config(page_title="Hip Condition Predictor", page_icon="ðŸ¦´")

    # Create a sidebar for navigation
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("Go to", ["Home", "About Us", "Contributors", "Contact Us"])

    # Display the selected page content
    if page == "Home":
        home_page()
    elif page == "About Us":
        about_us_page()
    elif page == "Contributors":
        contributors_page()
    elif page == "Contact Us":
        contact_us_page()

def home_page():
    # Header
    st.title("ðŸ¦´ Hip Condition Predictor")
    st.markdown("Enter the values below to predict the outcome.")

    # Input fields for user with labels
    acoustics_emission = st.number_input('Acoustics Emission')
    electrochemical_value = st.number_input('Electrochemical Value')
    mechanical_value = st.number_input('Mechanical Value')

    # Spacer for better layout
    st.markdown("---")

    output= ""
    # Prediction button
    if st.button('Predict Outcome'):
        out = prediction([[acoustics_emission,electrochemical_value,mechanical_value]])
        if out == 0:
            output = "ANODIC"
        elif out== 1:
            output = "CATHODIC"
        else:
            output = "CORROSION"
        # In a real ML integration, you would have model-related code here
        # For now, let's just display a message without any prediction
        st.success(output)

    # Footer
    st.markdown("---")
    st.write("ðŸš€ Credits")

def about_us_page():
    # About Us page content
    st.title("About Us")
    st.markdown("""
        # Machine Learning Techniques For Acoustic Emission Monitoring Of Hip Implants

        The outcome of this project involves the application of machine learning techniques to analyze and interpret the acoustic emission data generated by hip implants during daily activities. Our aim is to develop a deep learning model that learns the acoustic emission patterns and classifies the current health of the implant. This approach enables the identification of subtle changes and anomalies that may indicate early signs of implant deterioration, providing a proactive and predictive monitoring solution. The proposed solution enhances the current state of hip implant monitoring by offering a more nuanced and accurate assessment of implant performance.

        ## Applications
        The project is applicable in the healthcare industry, specifically in the field of orthopedics and hip transplant monitoring.
    """)

def contributors_page():
    # Contributors page content
    st.title("Contributors")
    st.markdown("""
        ## Shaun Noronha
        - **USN No.:** 4NM20IS132
        - **Email id:** shaunnoronha15@gmail.com
        - **Mobile No.:** 7349594246

        ## Ritesh Shetty
        - **USN No.:** 4NM20IS136
        - **Email id:** shettyritesh282@gmail.com
        - **Mobile No.:** 8652263369

        ## Shreenidhi
        - **USN No.:** 4NM20IS138
        - **Email id:** shreenidhibhat26@gmail.com
        - **Mobile No.:** 9480979226

        ## Sheetal
        - **USN No.:** 4NM20IS134
        - **Email id:** sheetalshenoy02@gmail.com
        - **Mobile No.:** 8105139164
    """)

def contact_us_page():
    # Contact Us page content
    st.title("Contact Us")
    st.markdown("Feel free to contact us and provide your feedback.")

    # Form for user inputs
    with st.form(key='contact_form'):
        name = st.text_input('Your Name')
        mobile_number = st.text_input('Mobile Number')
        email_address = st.text_input('Email Address')
        scope_in_future = st.text_area('Scope in Future')
        gender = st.selectbox('Gender', ['Male', 'Female', 'Other'])
        rating = st.slider('Rating out of 5 stars', 1, 5)
        review = st.text_area('Review')

        submit_button = st.form_submit_button(label='Submit')

        if submit_button:
            # Process the form data (you can add your processing logic here)
            st.success("Form submitted successfully!")

if __name__ == "__main__":
    main()